   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Connor Egbert
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0028 8C910000		lw $s1, 0($a0) # Get address of first string
  50 002c 8C920004		lw $s2, 4($a0) # Get address of second string
  51 0030 8C930008		lw $s3, 8($a0) # Get address of result string
  52 0034 8C94000C		lw $s4, 12($a0) # Get length of buffers
  53 0038 0000A820		add $s5, $zero, $zero # Make sure overflow value is zero first iteration
  54 003c 0014B020		add $s6, $zero, $s4 # save buffer length for use later
  55 0040               
  56 0040 02348820		add $s1, $s1, $s4 # start from the back of the string
  57 0044 02549020		add $s2, $s2, $s4 # which is really the begining of the number
  58 0048 02749820		add $s3, $s3, $s4
  59 004c               
  60 004c               add_loop:
  61 004c 92290000		lbu $t1, 0($s1)	# Get char from first string
  62 0050 924A0000		lbu $t2, 0($s2)	# get char from second string
  63 0054               
  64 0054               do_not_overflow:
  65 0054 012AB821		addu $s7, $t1, $t2
  66 0058               
  67 0058 26F7FFD0		addiu $s7, $s7, -48 # Keep result in ascii digit range
  68 005c 02F5B821		addu $s7, $s7, $s5
  69 0060 0000A820		add $s5, $zero, $zero
  70 0064               
  71 0064 2EEF003A		sltiu $t7, $s7, 58 # If result is > 9
  72 0068 15E00002		bne $t7, $zero, no_overflow # then add one to overflow value
  73 006c 26F7FFF6		addiu $s7, $s7, -10
  74 0070 24150001		addiu $s5, $zero, 1
  75 0074               
  76 0074               no_overflow:
  77 0074 2A8F0001		slti $t7, $s4, 1 # If buffer size is zero 
  78 0078 15E00007		bne $t7, $zero, add_loop_end # then go to loop end
  79 007c               
  80 007c 12D40001		beq $s6, $s4, first_loop_skip # If write in the first loop, overwrite period
  81 0080 A2770000		sb $s7, 0($s3)		
  82 0084               
  83 0084               first_loop_skip:
  84 0084 2231FFFF		addi $s1, $s1, -1 # Increment index of first string
  85 0088 2252FFFF		addi $s2, $s2, -1 # Increment address of second string
  86 008c 2273FFFF		addi $s3, $s3, -1 # Increment address of result string
  87 0090 2694FFFF		addiu $s4, $s4, -1 # Decrease length of buffer counter
  88 0094 08000013		j add_loop
  89 0098               
  90 0098               add_loop_end:
  91 0098 A2770000		sb $s7, 0($s3) 
  92 009c               
  93 009c               
  94 009c               # ###### END STUDENT CODE BLOCK 1 ######
  95 009c               
  96 009c               #
  97 009c               # Restore registers ra and s0 - s7 from the stack.
  98 009c               #
  99 009c 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
 100 00a0 8FB7001C		lw 	$s7, 28($sp)
 101 00a4 8FB60018		lw 	$s6, 24($sp)
 102 00a8 8FB50014		lw 	$s5, 20($sp)
 103 00ac 8FB40010		lw 	$s4, 16($sp)
 104 00b0 8FB3000C		lw 	$s3, 12($sp)
 105 00b4 8FB20008		lw 	$s2, 8($sp)
 106 00b8 8FB10004		lw 	$s1, 4($sp)
 107 00bc 8FB00000		lw 	$s0, 0($sp)
 108 00c0 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
 109 00c4               
 110 00c4 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
add_loop             0000004C R  text 
add_loop_end         00000098 R  text 
do_not_overflow      00000054 R  text 
first_loop_skip      00000084 R  text 
no_overflow          00000074 R  text 
